# Tests Selectifs Adaptatifs - Pipeline FunLearning
# Phase 3.2 - CI/CD Intelligence

name: Tests Adaptatifs FunLearning

on:
  workflow_call:
    inputs:
      test-strategy:
        required: true
        type: string
        description: "Strategie de test (selective, educational-focus, extensive, full)"
      changed-areas:
        required: true
        type: string
        description: "Zones impactees (frontend,backend,educational,tests,config)"
      educational-level:
        required: false
        type: string
        default: "5eme"
        description: "Niveau scolaire pour validation educative"

env:
  NODE_VERSION: "18"
  EDUCATIONAL_VALIDATION: true
  FUNLEARNING_PHASE: 3

jobs:
  # Tests Unitaires Intelligents
  smart-unit-tests:
    name: Tests Unitaires Cibles
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Tests Unitaires Selectifs
        env:
          TEST_STRATEGY: ${{ inputs.test-strategy }}
          CHANGED_AREAS: ${{ inputs.changed-areas }}
        run: |
          echo "Execution tests unitaires strategie: $TEST_STRATEGY"
          echo "Zones impactees: $CHANGED_AREAS"

          # Tests de base toujours executes
          echo "Tests core/utils..."
          npm run test:unit:core || true

          # Tests conditionnels selon zones impactees
          if echo "$CHANGED_AREAS" | grep -q "frontend"; then
            echo "Tests composants Svelte..."
            npm run test:unit:components || true
          fi

          if echo "$CHANGED_AREAS" | grep -q "backend"; then
            echo "Tests services Firebase..."
            npm run test:unit:firebase || true
          fi

          if echo "$CHANGED_AREAS" | grep -q "educational"; then
            echo "Tests modules educatifs..."
            npm run test:unit:educational || true
          fi

          # Generation rapport
          echo "Generation rapport tests unitaires..."
          npm run test:coverage || true

  # Tests Integration Adaptatifs
  adaptive-integration-tests:
    name: Tests Integration Adaptatifs
    runs-on: ubuntu-latest
    if: contains(inputs.test-strategy, 'extensive') || contains(inputs.test-strategy, 'full') || contains(inputs.test-strategy, 'educational-focus')

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Setup Firebase Emulators
        run: |
          echo "Configuration emulateurs Firebase..."
          npm install -g firebase-tools
          firebase emulators:start --only firestore,auth &
          sleep 10

      - name: Tests Integration Firebase
        if: contains(inputs.changed-areas, 'backend') || inputs.test-strategy == 'full'
        run: |
          echo "Tests integration Firebase..."
          npm run test:integration:firebase || true

      - name: Tests Integration Frontend
        if: contains(inputs.changed-areas, 'frontend') || inputs.test-strategy == 'full'
        run: |
          echo "Tests integration composants..."
          npm run test:integration:components || true

      - name: Tests Integration Educative
        if: contains(inputs.changed-areas, 'educational') || contains(inputs.test-strategy, 'educational-focus')
        env:
          EDUCATIONAL_LEVEL: ${{ inputs.educational-level }}
        run: |
          echo "Tests integration educative niveau $EDUCATIONAL_LEVEL..."
          npm run test:integration:educational -- --level=$EDUCATIONAL_LEVEL || true

  # Synthese Tests Adaptatifs
  adaptive-tests-summary:
    name: Synthese Tests Adaptatifs
    runs-on: ubuntu-latest
    needs: [smart-unit-tests, adaptive-integration-tests]
    if: always()

    steps:
      - name: Compilation Resultats
        run: |
          echo "Synthese des tests adaptatifs FunLearning"
          echo "Strategie utilisee: ${{ inputs.test-strategy }}"
          echo "Zones testees: ${{ inputs.changed-areas }}"
          echo "Niveau educatif: ${{ inputs.educational-level }}"

          # Analyse resultats
          UNIT_STATUS="${{ needs.smart-unit-tests.result }}"
          INTEGRATION_STATUS="${{ needs.adaptive-integration-tests.result }}"

          echo "Tests unitaires: $UNIT_STATUS"
          echo "Tests integration: $INTEGRATION_STATUS"

          # Calcul score global
          PASSED=0
          TOTAL=0

          [[ "$UNIT_STATUS" == "success" ]] && ((PASSED++))
          ((TOTAL++))

          [[ "$INTEGRATION_STATUS" == "success" || "$INTEGRATION_STATUS" == "skipped" ]] && ((PASSED++))
          ((TOTAL++))

          SCORE=$((PASSED * 100 / TOTAL))
          echo "Score global tests: $SCORE% ($PASSED/$TOTAL)"

          # Recommandations
          echo "Recommandations pour prochaine execution:"
          if [[ "${{ inputs.test-strategy }}" == "selective" && $SCORE -ge 80 ]]; then
            echo "Strategie selective efficace - continuer"
          elif [[ "${{ inputs.test-strategy }}" == "selective" && $SCORE -lt 80 ]]; then
            echo "Strategie selective insuffisante - passer a extensive"
          fi

          if echo "${{ inputs.changed-areas }}" | grep -q "educational"; then
            echo "Changements educatifs detectes - validation specialisee requise"
          fi
