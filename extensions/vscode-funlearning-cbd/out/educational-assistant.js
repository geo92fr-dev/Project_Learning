"use strict";
/**
 * üìö Educational Assistant - Assistant p√©dagogique intelligent
 * Phase 2.1 - Intelligence Contextuelle FunLearning
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EducationalAssistant = void 0;
class EducationalAssistant {
  constructor(workspaceRoot) {
    this.workspaceRoot = workspaceRoot;
    this.levelHierarchy = [
      "6eme",
      "5eme",
      "4eme",
      "3eme",
      "seconde",
      "premiere",
      "terminale",
    ];
    this.competenceFramework = {
      "6eme": [
        "Comprendre et s'exprimer en utilisant la langue fran√ßaise",
        "Comprendre et s'exprimer en utilisant les langages math√©matiques",
        "Comprendre et s'exprimer en utilisant les langages scientifiques",
        "Comprendre et s'exprimer en utilisant les langages des arts",
        "Les m√©thodes et outils pour apprendre",
      ],
      "5eme": [
        "Ma√Ætriser la lecture et l'√©criture",
        "Pratiquer diff√©rents langages math√©matiques",
        "Adopter un comportement √©thique et responsable",
        "Se situer dans l'espace et dans le temps",
        "Mobiliser des outils num√©riques",
      ],
      "4eme": [
        "Analyser et comprendre un document",
        "Pratiquer diff√©rents langages pour penser et communiquer",
        "Mobiliser des outils num√©riques pour apprendre",
        "Adopter un comportement √©thique et responsable",
        "Coop√©rer et mutualiser",
      ],
      "3eme": [
        "Ma√Ætriser l'expression √©crite et orale",
        "Utiliser les math√©matiques dans diff√©rents domaines",
        "Comprendre le monde contemporain",
        "D√©velopper sa sensibilit√© et sa cr√©ativit√©",
        "Apprendre √† apprendre",
      ],
    };
    this.vocabularyLevels = {
      "6eme": { maxComplexity: 3, familiarWords: 0.8 },
      "5eme": { maxComplexity: 4, familiarWords: 0.7 },
      "4eme": { maxComplexity: 5, familiarWords: 0.6 },
      "3eme": { maxComplexity: 6, familiarWords: 0.5 },
    };
  }
  /**
   * üéì Valider contenu p√©dagogique
   */
  async validateEducationalContent(content, targetLevel) {
    const gaps = [];
    const suggestions = [];
    let score = 100;
    // Analyser le niveau de vocabulaire
    const vocabularyAnalysis = this.analyzeVocabulary(content, targetLevel);
    if (!vocabularyAnalysis.appropriate) {
      gaps.push("Vocabulaire trop complexe pour le niveau");
      suggestions.push(
        `Simplifier le vocabulaire (complexit√© actuelle: ${vocabularyAnalysis.complexity})`
      );
      score -= 20;
    }
    // Analyser la structure p√©dagogique
    const structureAnalysis = this.analyzeStructure(content);
    if (!structureAnalysis.hasObjectives) {
      gaps.push("Objectifs d'apprentissage manquants");
      suggestions.push("Ajouter des objectifs clairs au d√©but");
      score -= 15;
    }
    if (!structureAnalysis.hasExercises) {
      gaps.push("Exercices pratiques manquants");
      suggestions.push("Inclure des activit√©s interactives");
      score -= 15;
    }
    // Analyser les comp√©tences couvertes
    const competences = this.extractCompetences(content, targetLevel);
    if (competences.length === 0) {
      gaps.push("Aucune comp√©tence identifi√©e");
      suggestions.push("Expliciter les comp√©tences d√©velopp√©es");
      score -= 10;
    }
    // Analyser l'engagement
    const engagementScore = this.analyzeEngagement(content);
    if (engagementScore < 60) {
      gaps.push("Contenu peu engageant");
      suggestions.push("Ajouter des √©l√©ments interactifs et ludiques");
      score -= 10;
    }
    // Analyser l'accessibilit√©
    const accessibilityIssues = this.analyzeAccessibility(content);
    if (accessibilityIssues.length > 0) {
      gaps.push("Probl√®mes d'accessibilit√© d√©tect√©s");
      suggestions.push(
        ...accessibilityIssues.map((issue) => `Corriger: ${issue}`)
      );
      score -= accessibilityIssues.length * 5;
    }
    return {
      isValid: score >= 70,
      level: targetLevel,
      competences,
      gaps,
      suggestions,
      score: Math.max(0, score),
    };
  }
  /**
   * üìù Analyser vocabulaire
   */
  analyzeVocabulary(content, level) {
    const words = content.toLowerCase().match(/\b\w+\b/g) || [];
    const levelConfig = this.vocabularyLevels[level];
    if (!levelConfig) {
      return { appropriate: true, complexity: 3 };
    }
    // Calculer complexit√© moyenne des mots
    let totalComplexity = 0;
    let complexWords = 0;
    for (const word of words) {
      const complexity = this.getWordComplexity(word);
      totalComplexity += complexity;
      if (complexity > levelConfig.maxComplexity) {
        complexWords++;
      }
    }
    const avgComplexity = totalComplexity / words.length;
    const complexWordRatio = complexWords / words.length;
    return {
      appropriate:
        avgComplexity <= levelConfig.maxComplexity &&
        complexWordRatio <= 1 - levelConfig.familiarWords,
      complexity: avgComplexity,
    };
  }
  /**
   * üî§ Calculer complexit√© d'un mot
   */
  getWordComplexity(word) {
    // Mots simples (fr√©quents)
    const simpleWords = new Set([
      "le",
      "de",
      "et",
      "√†",
      "un",
      "il",
      "√™tre",
      "et",
      "en",
      "avoir",
      "que",
      "pour",
      "dans",
      "ce",
      "son",
      "une",
      "sur",
      "avec",
      "ne",
      "se",
      "pas",
      "tout",
      "plus",
      "par",
      "grand",
      "bien",
      "autre",
      "m√™me",
      "tr√®s",
      "faire",
      "voir",
      "bon",
    ]);
    if (simpleWords.has(word)) return 1;
    if (word.length <= 4) return 2;
    if (word.length <= 6) return 3;
    if (word.length <= 8) return 4;
    if (word.length <= 10) return 5;
    return 6;
  }
  /**
   * üèóÔ∏è Analyser structure p√©dagogique
   */
  analyzeStructure(content) {
    const hasObjectives = /objectif|but|apprendre|comprendre|ma√Ætriser/i.test(
      content
    );
    const hasExercises = /exercice|activit√©|pratique|quiz|question/i.test(
      content
    );
    const hasConclusion = /conclusion|r√©sum√©|bilan|synth√®se/i.test(content);
    return { hasObjectives, hasExercises, hasConclusion };
  }
  /**
   * üéØ Extraire comp√©tences
   */
  extractCompetences(content, level) {
    const levelCompetences = this.competenceFramework[level] || [];
    const foundCompetences = [];
    for (const competence of levelCompetences) {
      const keywords = this.getCompetenceKeywords(competence);
      const hasKeywords = keywords.some((keyword) =>
        new RegExp(keyword, "i").test(content)
      );
      if (hasKeywords) {
        foundCompetences.push(competence);
      }
    }
    return foundCompetences;
  }
  /**
   * üîë Obtenir mots-cl√©s de comp√©tence
   */
  getCompetenceKeywords(competence) {
    const keywordMap = {
      "langue fran√ßaise": [
        "fran√ßais",
        "langue",
        "√©criture",
        "lecture",
        "orthographe",
        "grammaire",
      ],
      "langages math√©matiques": [
        "math√©matiques",
        "calcul",
        "nombre",
        "g√©om√©trie",
        "alg√®bre",
      ],
      "langages scientifiques": [
        "science",
        "exp√©rience",
        "observation",
        "hypoth√®se",
      ],
      "langages des arts": ["art", "cr√©ativit√©", "expression", "esth√©tique"],
      "outils pour apprendre": [
        "m√©thode",
        "strat√©gie",
        "organisation",
        "planification",
      ],
      "outils num√©riques": [
        "num√©rique",
        "ordinateur",
        "logiciel",
        "internet",
        "technologie",
      ],
    };
    for (const [key, keywords] of Object.entries(keywordMap)) {
      if (competence.toLowerCase().includes(key)) {
        return keywords;
      }
    }
    return competence.toLowerCase().split(" ");
  }
  /**
   * üéÆ Analyser engagement
   */
  analyzeEngagement(content) {
    let score = 50; // Score de base
    // √âl√©ments engageants
    const engagingElements = [
      { pattern: /\?/g, points: 5, max: 20 }, // Questions
      { pattern: /exemple|cas|situation/gi, points: 10, max: 30 }, // Exemples
      { pattern: /imagine|suppose|si tu/gi, points: 15, max: 30 }, // Mise en situation
      { pattern: /jeu|d√©fi|challenge/gi, points: 20, max: 40 }, // Gamification
      { pattern: /d√©couvrir|explorer|investiguer/gi, points: 10, max: 20 }, // Investigation
      { pattern: /cr√©er|construire|inventer/gi, points: 15, max: 30 }, // Cr√©ativit√©
    ];
    for (const element of engagingElements) {
      const matches = content.match(element.pattern);
      if (matches) {
        score += Math.min(matches.length * element.points, element.max);
      }
    }
    // P√©nalit√©s pour contenu passif
    const passiveIndicators = [
      /apprendre par c≈ìur/gi,
      /m√©moriser/gi,
      /r√©p√©ter/gi,
    ];
    for (const indicator of passiveIndicators) {
      const matches = content.match(indicator);
      if (matches) {
        score -= matches.length * 10;
      }
    }
    return Math.max(0, Math.min(100, score));
  }
  /**
   * ‚ôø Analyser accessibilit√©
   */
  analyzeAccessibility(content) {
    const issues = [];
    // V√©rifier images sans description
    const images = content.match(/!\[.*?\]\(.*?\)/g) || [];
    for (const image of images) {
      if (!/!\[.+\]/.test(image)) {
        issues.push("Image sans texte alternatif");
      }
    }
    // V√©rifier longueur des paragraphes
    const paragraphs = content.split("\n\n");
    const longParagraphs = paragraphs.filter((p) => p.length > 500);
    if (longParagraphs.length > 0) {
      issues.push("Paragraphes trop longs (>500 caract√®res)");
    }
    // V√©rifier structure hi√©rarchique
    const headers = content.match(/^#+\s/gm) || [];
    if (headers.length === 0) {
      issues.push("Manque de titres pour structurer le contenu");
    }
    // V√©rifier contrastes de couleur (simulation)
    if (content.includes("color:") || content.includes("background:")) {
      issues.push("V√©rifier les contrastes de couleurs");
    }
    return issues;
  }
  /**
   * üìö G√©n√©rer contenu √©ducatif
   */
  async generateEducationalContent(topic, level, competences) {
    const id = `content_${Date.now()}`;
    // Objectifs bas√©s sur les comp√©tences
    const objectives = competences.map(
      (comp) => `D√©velopper la comp√©tence: ${comp.toLowerCase()}`
    );
    // G√©n√©rer exercices adapt√©s au niveau
    const exercises = await this.generateExercises(topic, level);
    // G√©n√©rer crit√®res d'√©valuation
    const assessments = this.generateAssessments(competences);
    return {
      id,
      title: `${topic} - Niveau ${level}`,
      level,
      competences,
      objectives,
      content: this.generateContentTemplate(topic, level, objectives),
      exercises,
      assessments,
    };
  }
  /**
   * üèãÔ∏è G√©n√©rer exercices
   */
  async generateExercises(topic, level) {
    const exercises = [];
    const levelIndex = this.levelHierarchy.indexOf(level);
    const difficulty = Math.max(1, Math.min(5, levelIndex + 1));
    // Quiz de compr√©hension
    exercises.push({
      id: `quiz_${Date.now()}`,
      type: "quiz",
      question: `Quelle est la d√©finition principale de ${topic} ?`,
      options: [
        "Option A - R√©ponse simple",
        "Option B - R√©ponse correcte",
        "Option C - R√©ponse complexe",
        "Option D - R√©ponse incorrecte",
      ],
      correctAnswer: "Option B - R√©ponse correcte",
      explanation: `La r√©ponse B est correcte car elle correspond au niveau ${level}`,
      difficulty,
    });
    // Exercice pratique
    exercises.push({
      id: `practice_${Date.now()}`,
      type: "coding",
      question: `Cr√©ez un exemple pratique de ${topic}`,
      explanation:
        "Cet exercice permet de mettre en pratique les concepts th√©oriques",
      difficulty,
    });
    // R√©flexion personnelle
    exercises.push({
      id: `reflection_${Date.now()}`,
      type: "reflection",
      question: `Comment pouvez-vous utiliser ${topic} dans votre quotidien ?`,
      explanation:
        "Cette question favorise la m√©tacognition et le transfert des apprentissages",
      difficulty: Math.max(1, difficulty - 1),
    });
    return exercises;
  }
  /**
   * üìä G√©n√©rer √©valuations
   */
  generateAssessments(competences) {
    return competences.map((competence, index) => ({
      id: `assessment_${index}`,
      criteria: competence,
      maxScore: 4,
      rubric: [
        "Non atteint (1) - Comp√©tence non d√©montr√©e",
        "Partiellement atteint (2) - Comp√©tence en cours d'acquisition",
        "Atteint (3) - Comp√©tence ma√Ætris√©e",
        "D√©pass√© (4) - Comp√©tence expertis√©e",
      ],
    }));
  }
  /**
   * üìù G√©n√©rer template de contenu
   */
  generateContentTemplate(topic, level, objectives) {
    return `# ${topic} - Niveau ${level}

## üéØ Objectifs d'apprentissage

${objectives.map((obj) => `- ${obj}`).join("\n")}

## üìö Introduction

D√©couvrons ensemble le concept de **${topic}**. Ce sujet est adapt√© √† votre niveau ${level} et vous permettra de d√©velopper de nouvelles comp√©tences.

## üîç Exploration

### Qu'est-ce que ${topic} ?

[Contenu principal √† d√©velopper selon le sujet]

### Pourquoi est-ce important ?

[Contexte et applications pratiques]

## üí° Points cl√©s √† retenir

- Point important 1
- Point important 2  
- Point important 3

## üéÆ Activit√©s pratiques

[Les exercices g√©n√©r√©s seront int√©gr√©s ici]

## üìà Pour aller plus loin

Suggestions d'approfondissement adapt√©es au niveau ${level}.

## ‚úÖ Auto-√©valuation

V√©rifiez votre compr√©hension en r√©pondant aux questions d'√©valuation.
`;
  }
  /**
   * üé® G√©n√©rer recommandations
   */
  async generateRecommendations(currentLevel, completedTopics) {
    const recommendations = [];
    const levelIndex = this.levelHierarchy.indexOf(currentLevel);
    // Recommandations bas√©es sur le niveau
    if (levelIndex < this.levelHierarchy.length - 1) {
      const nextLevel = this.levelHierarchy[levelIndex + 1];
      recommendations.push(
        `Pr√©parer la transition vers le niveau ${nextLevel}`
      );
    }
    // Recommandations bas√©es sur les sujets compl√©t√©s
    if (completedTopics.length < 3) {
      recommendations.push("Diversifier les sujets √©tudi√©s");
    }
    // Recommandations g√©n√©rales
    recommendations.push("Pratiquer r√©guli√®rement avec des exercices vari√©s");
    recommendations.push("Participer √† des discussions collaboratives");
    return recommendations;
  }
  /**
   * üìä Obtenir statistiques d'apprentissage
   */
  async getLearningAnalytics() {
    // Impl√©mentation future avec tracking des donn√©es
    return {
      totalContent: 0,
      completionRate: 0,
      averageScore: 0,
      strongAreas: [],
      weakAreas: [],
    };
  }
}
exports.EducationalAssistant = EducationalAssistant;
//# sourceMappingURL=educational-assistant.js.map
