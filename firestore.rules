/**
 * Firebase Security Rules
 * Phase 5: Firebase Data Layer - Security Implementation
 * 
 * @description Règles de sécurité Firestore avec validation et RBAC
 * @follows MyDevFramework CoPilot Best Practices + TDD approach
 * @implements Comprehensive security for educational platform
 */

rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ===== HELPER FUNCTIONS =====
    
    /**
     * Vérifie si l'utilisateur est authentifié
     */
    function isAuthenticated() {
      return request.auth != null;
    }
    
    /**
     * Vérifie si l'utilisateur accède à ses propres données
     */
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    /**
     * Vérifie le rôle de l'utilisateur
     */
    function hasRole(role) {
      return isAuthenticated() && 
             request.auth.token.role == role;
    }
    
    /**
     * Vérifie si l'utilisateur est admin
     */
    function isAdmin() {
      return hasRole('admin');
    }
    
    /**
     * Vérifie si l'utilisateur est enseignant
     */
    function isTeacher() {
      return hasRole('teacher');
    }
    
    /**
     * Vérifie si l'utilisateur est étudiant
     */
    function isStudent() {
      return hasRole('student');
    }
    
    /**
     * Valide le format email
     */
    function isValidEmail(email) {
      return email is string && 
             email.matches('[^@\\s]+@[^@\\s]+\\.[^@\\s]+');
    }
    
    /**
     * Valide le rôle utilisateur
     */
    function isValidRole(role) {
      return role in ['student', 'teacher', 'admin'];
    }
    
    /**
     * Valide un timestamp ISO
     */
    function isValidTimestamp(timestamp) {
      return timestamp is string &&
             timestamp.matches('\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z');
    }
    
    /**
     * Valide les données utilisateur requises
     */
    function isValidUserData(data) {
      return data.keys().hasAll(['email', 'displayName', 'role', 'createdAt', 'lastLoginAt']) &&
             isValidEmail(data.email) &&
             data.displayName is string && data.displayName.size() > 0 &&
             isValidRole(data.role) &&
             isValidTimestamp(data.createdAt) &&
             isValidTimestamp(data.lastLoginAt);
    }
    
    /**
     * Valide les données de cours
     */
    function isValidCourseData(data) {
      return data.keys().hasAll(['title', 'description', 'category', 'level']) &&
             data.title is string && data.title.size() > 0 &&
             data.description is string && data.description.size() > 0 &&
             data.category is string &&
             data.level in ['beginner', 'intermediate', 'advanced'];
    }
    
    /**
     * Vérifie si un cours est publié
     */
    function isCoursePublished(courseData) {
      return courseData != null && 
             courseData.metadata != null &&
             courseData.metadata.isPublished == true;
    }
    
    /**
     * Vérifie si l'utilisateur est l'auteur du cours
     */
    function isCourseAuthor(courseData) {
      return isAuthenticated() && 
             courseData != null &&
             courseData.metadata != null &&
             courseData.metadata.authorId == request.auth.uid;
    }
    
    // ===== COLLECTION RULES =====
    
    /**
     * Règles pour la collection users
     * - Lecture: Utilisateur peut lire son propre profil, enseignants peuvent lire étudiants, admins tout
     * - Écriture: Utilisateur peut modifier son propre profil, admins peuvent tout modifier
     */
    match /users/{userId} {
      allow read: if isOwner(userId) || 
                     isAdmin() || 
                     (isTeacher() && exists(/databases/$(database)/documents/users/$(userId)) && 
                      get(/databases/$(database)/documents/users/$(userId)).data.role == 'student');
      
      allow create: if isOwner(userId) && 
                       isValidUserData(request.resource.data) &&
                       request.resource.data.email == request.auth.token.email;
      
      allow update: if (isOwner(userId) || isAdmin()) && 
                       isValidUserData(request.resource.data) &&
                       // Empêcher les utilisateurs de changer leur propre rôle (sauf admins)
                       (isAdmin() || request.resource.data.role == resource.data.role);
      
      allow delete: if isAdmin();
    }
    
    /**
     * Règles pour la collection courses
     * - Lecture: Cours publiés pour tous les authentifiés, cours non publiés pour auteurs/admins
     * - Écriture: Auteurs et admins peuvent modifier, seuls enseignants/admins peuvent créer
     */
    match /courses/{courseId} {
      allow read: if isAuthenticated() && 
                     (isCoursePublished(resource.data) || 
                      isCourseAuthor(resource.data) || 
                      isAdmin());
      
      allow create: if (isTeacher() || isAdmin()) && 
                       isValidCourseData(request.resource.data) &&
                       request.resource.data.metadata.authorId == request.auth.uid;
      
      allow update: if (isCourseAuthor(resource.data) || isAdmin()) && 
                       isValidCourseData(request.resource.data) &&
                       // Empêcher de changer l'auteur
                       request.resource.data.metadata.authorId == resource.data.metadata.authorId;
      
      allow delete: if isCourseAuthor(resource.data) || isAdmin();
    }
    
    /**
     * Règles pour la collection competences
     * - Lecture: Tous les authentifiés peuvent lire les compétences actives
     * - Écriture: Seuls enseignants et admins peuvent modifier
     */
    match /competences/{competenceId} {
      allow read: if isAuthenticated() && 
                     (resource == null || resource.data.metadata.isActive == true);
      
      allow create, update: if (isTeacher() || isAdmin()) && 
                               request.resource.data.metadata.createdBy == request.auth.uid;
      
      allow delete: if isAdmin();
    }
    
    /**
     * Règles pour la collection userProgress
     * - Format des documents: userId-courseId
     * - Lecture/Écriture: Utilisateur pour ses propres progrès, enseignants pour leurs étudiants, admins tout
     */
    match /userProgress/{progressId} {
      // Extraire userId du progressId (format: userId-courseId)
      function getProgressUserId() {
        return progressId.split('-')[0];
      }
      
      allow read: if isOwner(getProgressUserId()) || 
                     isAdmin() ||
                     (isTeacher() && exists(/databases/$(database)/documents/users/$(getProgressUserId())) &&
                      get(/databases/$(database)/documents/users/$(getProgressUserId())).data.role == 'student');
      
      allow create: if isOwner(getProgressUserId()) &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.userId == getProgressUserId();
      
      allow update: if isOwner(getProgressUserId()) &&
                       request.resource.data.userId == resource.data.userId &&
                       // Empêcher de modifier l'userId et courseId
                       request.resource.data.courseId == resource.data.courseId;
      
      allow delete: if isOwner(getProgressUserId()) || isAdmin();
    }
    
    /**
     * Règles pour la collection analytics
     * - Lecture: Enseignants et admins peuvent lire les analytics
     * - Écriture: Système uniquement (via Cloud Functions)
     */
    match /analytics/{document=**} {
      allow read: if isTeacher() || isAdmin();
      // Pas de write rules - seules les Cloud Functions peuvent écrire
    }
    
    /**
     * Règles pour les sous-collections de notifications
     * - Chaque utilisateur peut gérer ses propres notifications
     */
    match /users/{userId}/notifications/{notificationId} {
      allow read, write: if isOwner(userId);
    }
    
    /**
     * Règles pour les évaluations
     * - Lecture: Propriétaire et enseignants/admins
     * - Écriture: Propriétaire uniquement pour création, enseignants/admins pour correction
     */
    match /assessments/{assessmentId} {
      allow read: if isAuthenticated() && 
                     (resource.data.userId == request.auth.uid ||
                      isTeacher() || isAdmin());
      
      allow create: if isAuthenticated() &&
                       request.resource.data.userId == request.auth.uid;
      
      allow update: if (resource.data.userId == request.auth.uid && 
                        // L'utilisateur ne peut que soumettre ses réponses
                        request.resource.data.keys().hasAll(['responses', 'submittedAt'])) ||
                       (isTeacher() || isAdmin() && 
                        // Les enseignants peuvent corriger
                        request.resource.data.keys().hasAll(['score', 'feedback', 'correctedAt']));
      
      allow delete: if isAdmin();
    }
    
    // ===== RÈGLES GLOBALES DE SÉCURITÉ =====
    
    /**
     * Bloquer tout accès non spécifiquement autorisé
     */
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

/**
 * Règles pour Firebase Storage (assets éducatifs)
 */
service firebase.storage {
  match /b/{bucket}/o {
    
    /**
     * Images de profil utilisateur
     */
    match /users/{userId}/profile/{fileName} {
      allow read: if true; // Images publiques
      allow write: if request.auth != null && 
                      request.auth.uid == userId &&
                      request.resource.size < 5 * 1024 * 1024 && // 5MB max
                      request.resource.contentType.matches('image/.*');
    }
    
    /**
     * Contenu de cours (vidéos, documents)
     */
    match /courses/{courseId}/{fileName} {
      allow read: if request.auth != null; // Authentifié pour accéder au contenu
      allow write: if request.auth != null && 
                      (request.auth.token.role == 'teacher' || 
                       request.auth.token.role == 'admin');
    }
    
    /**
     * Uploads temporaires pour traitement
     */
    match /temp/{userId}/{fileName} {
      allow read, write: if request.auth != null && 
                            request.auth.uid == userId &&
                            request.resource.size < 50 * 1024 * 1024; // 50MB max
    }
    
    /**
     * Bloquer tout autre accès
     */
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
